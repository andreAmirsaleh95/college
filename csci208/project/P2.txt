CSCI 208 Project Phase 2: Programming ParadigmsAndre AmirsalehScala is object-oriented and functional. In Scala, every value is an object, and objects are represented by classes and traits [1]. Scala supports its classes with subclassing as well as a “mixin-based composition mechanism,” which is effectively a form of multiple inheritance – allowing programmers to reuse classes in ways that would be impossible using just single inheritance and interfaces [1][2]. Scala implements the functional programming paradigm such that every function is a value. Scala supports nested functions, currying, case-classes, pattern-matching – giving it the ability to model algebraic types. Scala is written in an imperative style with loops and assignments [1].References:1. http://docs.scala-lang.org/tutorials/tour/tour-of-scala2. http://docs.scala-lang.org/tutorials/tour/mixin-class-composition.html